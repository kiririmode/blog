# プロジェクト固有のルールと学習事項

## Blogエントリの投稿プロセス

Blogエントリを作成するときは必ず以下のプロセスに従ってください

1. `make new-entry`を実行して、新しいエントリを作成する
    - ファイルは、`/workspaces/blog/kiririmode.hatenablog.jp/entry/_draft`ディレクトリ配下に、数字列.mdというファイル名で作成される。このファイルが1エントリに相当する
2. このファイルにエントリの内容を記述する。文体は、以下の文体パターンに従って記述する
3. Clineによって、文章の論理展開、技術的な正しさ、読者としての読みやすさをチェックし、推敲・修正を行う
4. npx textlint _draft/数字列.mdを実行し、そのエラーを解析して、文章の校正を行う。エラーがなくなるまで textilnt の実行と修正を繰り返す
4. `blogsync push _draft/数字列.md`を実行して、エントリをはてなブログに投稿する

## 文体パターン

### 記事構造
1. タイトル
   - 具体的な技術要素を含める
   - 「〜する」「〜について」などの動詞で終える
   - 例：「GitHub Actionsでテストカバレッジの増減を可視化する」

2. フロントマター
   - Title: 記事タイトルをそのまま使用
   - Category: 関連する技術カテゴリを複数指定
     - インフラ系：terraform, aws, github など
     - 開発プロセス系：development process, ci など
     - 言語系：java, python など
   - Date: 投稿日時を明記
   - URL: はてなブログのURL
   - EditURL: 編集用URL

3. 導入部
   - 1-2段落で課題や背景を簡潔に説明
   - 「最近」「〜なんです」など、現在の状況から入る
   - 読者の興味を引く疑問提起
   - 例：「生成AIの登場でシステム開発のやり方が大きく変わろうとしています。」

4. 目次セクション
   - [:contents] を必ず挿入
   - 主要セクションを3-5個程度に分割
   - 階層は最大3階層まで

5. 本文構成
   - 見出しレベル
     - # : 大きなセクション（必須）
     - ## : サブセクション（状況に応じて）
     - ### : 詳細項目（必要な場合のみ）
   - セクション間の流れ
     - 概要説明 → 技術詳細 → 実装例 → 考察
     - 各セクション冒頭で要点を簡潔に述べる

6. まとめセクション
   - 「まとめ」または「最後に」という見出し
   - 箇条書きで重要ポイントを整理
   - 今後の展望や個人的な感想を添える
   - 未解決の課題があれば明記

### 技術説明パターン

1. 技術の文脈化
   - 「最近」「〜なんです」などで現在の状況を説明
   - 具体的なユースケースや課題から入る
   - 技術選定の理由や背景を明確に
   - 例：「最近は多くの場合、〜という流れが一般的になった」

2. 技術的深掘り
   - 表層的な説明から徐々に深い技術解説へ
   - 実装の詳細や内部動作の解説
   - 技術的な制約や限界の説明
   - セキュリティ面での考慮事項

3. コードブロック
   - 記法：
     ```言語名
     コード
     ```
   - 言語別の特徴：
     - YAML: CI/CD設定、設定ファイル
     - HCL: Terraform設定
     - Java/Python: アプリケーションコード
   - コードの前後：
     - 前：何を実装するかの説明
     - 後：実装のポイントや注意点

2. 引用
   - 外部引用：
     ```
     > 引用文
     >
     > <cite>[引用元タイトル](URL)</cite>
     ```
   - 埋め込み：
     ```
     [https://url:embed]
     ```
   - 書籍引用：
     ```
     ISBN:xxxxxxxxxxxxx:detail
     ```

3. 図解・スクリーンショット
   - 画像の配置：
     ```
     ![説明文](画像URL)
     ```
   - キャプション：
     ```
     <cite>出典元</cite>
     ```

### 文章表現パターン

1. メタ情報の提示
   - 「TL;DR」セクションでの要約
   - 「参考文献」セクションでの出典明記
   - 「まとめ」での振り返りと展望

2. 技術説明時
   - 主な表現：
     - 「〜となります」：確定的な事実
     - 「〜です」：基本的な説明
     - 「〜できます」：機能や可能性の説明
   - 例文：
     - 「このアプローチにより、〜が可能となります」
     - 「〜という特徴があります」

2. 個人の見解
   - 主な表現：
     - 「僕は〜と考えています」
     - 「〜と思います」
     - 「〜かもしれません」
   - 例文：
     - 「僕自身、最近このテーマについて真剣に考え、〜」
     - 「〜という選択をしました」

3. 課題提起
   - 主な表現：
     - 「〜という課題があります」
     - 「〜という問題に直面します」
   - 例文：
     - 「この手法には以下の課題があります」

4. 解決策提示
   - 主な表現：
     - 「〜することで解決できます」
     - 「〜というアプローチが考えられます」
   - 例文：
     - 「この課題を解決するには、〜という方法があります」

### カテゴリ別パターン

1. ソースコード解説記事
   - 構成：
     1. 概要説明（What）
     2. 処理の流れ（How）
     3. コードの具体例
     4. 実装の意図（Why）
     5. まとめと考察
   - 特徴：
     - ソースコードへの直接リンク
     - コードブロックと説明の交互配置
     - 実装の背景や意図の解説
   - 説明手法：
     - 上位概念から詳細へ段階的に説明
     - 重要な関数やクラスの役割を明確に
     - 処理フローの図示
   - 用語：
     - 専門用語の初出時に説明
     - 略語は正式名称を併記
     - 技術用語の統一

2. 日常・目標記事
   - 構成：
     1. 要点の箇条書き提示
     2. 各項目の詳細説明
     3. 背景や考えの共有
   - 文体：
     - より親しみやすい口調
     - 「〜なんですが」「〜んで」などの話し言葉
     - 個人的な感情表現を積極的に使用
   - 特徴：
     - 箇条書きを効果的に活用
     - 個人の思考プロセスを丁寧に説明
     - 将来への展望や懸念を含める

2. プログラミング記事
   - 追加の構成要素：
     - 実装の背景と動機
     - 技術選定の根拠
     - セキュリティ考慮事項
     - 運用上の注意点
   - 代替案の提示と比較
   - エッジケースへの言及
   - 構成：
     1. 課題設定
     2. 実装アプローチ
     3. コード例
     4. 実装ポイント
     5. 注意点
   - コード例の示し方：
     - Before/Afterを明示
     - 重要な部分をコメントで強調
     - エラーケースの考慮

2. インフラ構築記事
   - 追加の構成要素：
     - セキュリティ設定の解説
     - スケーラビリティの考慮
     - 運用コストの見積もり
     - トラブルシューティング手順
   - ベストプラクティスへの言及
   - 既存システムとの統合考慮
   - 構成：
     1. アーキテクチャ概要
     2. 構築手順
     3. 設定例
     4. 動作確認
     5. 運用考慮点
   - 図解の活用：
     - アーキテクチャ図
     - コンポーネント関係図
     - シーケンス図

3. ツール・製品レビュー
   - 技術解説の深さ：
     - 実装の内部動作まで踏み込む
     - ソースコードレベルでの解説
     - 具体的なユースケース提示
   - セキュリティ考慮：
     - 潜在的なリスクの説明
     - 対策方法の提示
     - 運用上の注意点
   - 構成：
     1. 製品概要
     2. 選定理由
     3. 具体的な使用例
     4. メリット・デメリット
     5. 今後の展望
   - 比較ポイント：
     - 類似製品との比較
     - コスト面の考慮
     - 運用時の注意点

## 品質基準

### 文章校正
- textlintルールに従う
- prhによる表記統一
- リンクの有効性確認

### コード品質
- シェルスクリプトの静的解析
- テストカバレッジの維持
- コメントの充実

## デプロイメントルール

### 記事公開
- 品質チェックの通過必須
- メタデータの完全性確認
- 公開前のプレビュー確認

### バージョン管理
- 意味のあるコミットメッセージ
- 適切なブランチ管理
- 定期的なバックアップ

## 運用ノウハウ

### 効率化のヒント
- Make targetの活用
- スクリプトの組み合わせ
- バッチ処理の活用

### トラブルシューティング
- 一般的なエラーと解決策
- デバッグ手順
- リカバリー手順

## 学習した改善点

### パフォーマンス
- 処理の最適化
- リソース使用の効率化
- 実行時間の短縮

### 保守性
- モジュール化の推進
- ドキュメントの充実
- テストの自動化
